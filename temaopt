#include "pch.h"
#include <iostream>
#include <string>
using namespace std;

class Avion  {
private:
	const unsigned int id;
	string nume;
	string ruta;
	int numar_locuri;
	float* pret_locuri;
	bool permis_de_zbor;
	static int nr_avioane;


public:
	// constructor default
	Avion();
	//constructor cu toti parametri
	Avion(string v_nume, string v_ruta,int v_numar_locuri, float* v_pret_locuri, bool v_permis_de_zbor);
	//constructor de copiere
	Avion(const Avion& copie);
	//destructor
	~Avion();
	//Operator =
	Avion& operator=(const Avion& avion);
	//operator ostream<<
	friend ostream& operator<<(ostream& out, Avion a);
	//operator istream>>
	friend istream& operator>>(istream& in, Avion& a);
	//setteri si getteri 
	void set_nume(string v_nume);
	string get_nume();
	void set_ruta(string v_ruta);
	string get_ruta();
	void set_numar_locuri(int v_numar_locuri);
	int get_numar_locuri();
	void set_pret_locuri(float* v_pret_locuri);
	float get_pret_locuri();
	void set_permis_de_zbor(bool v_permis_de_zbor);
	bool get_permis_de_zbor();
	//operator functie
	void operator()();
	//operator index
	float operator[](int index);
	//operator negatie
	bool operator!();
	//operator == 
	bool operator==(Avion avion);
	// cast explicit
	explicit operator float();
	//metoda statica
	static int get_nr_avioane();
	//obiectul este primul
	Avion operator-(int a);
	//obiectul este al doilea
	friend Avion operator-(int a, Avion& avion);

	//obiectul este primul
	Avion operator+(int a);
	//obiectul este al doilea
	friend Avion operator+(int a, Avion& avion);
	
	//supraincarcare ++ post si pre incrementare
	
	//preincrementare ++y
	Avion& operator++();
	
	//postincrementare y++
	Avion operator++(int);
	
	//predecrementare --y
	Avion& operator--();

	//postdecrementare y--
	Avion operator--(int);

	
	//operator +=
	Avion& operator+=(const Avion& Avion);

	//operator -=
	Avion& operator -=(const Avion& Avion);


};

int Avion::nr_avioane = 0;



int main()
{
	Avion a;
	cin >> a;
	cout << a;

	//testare operator egal 
	// Avion b = a;
	// cout << b;

	//testare postincrementare
	a++;
	cout << "Numar locuri a: " << a.get_numar_locuri() << endl;

	//testare postdecrementare
	a--;
	cout << "Numar locuri a: " << a.get_numar_locuri() << endl;

	float p[2] = {14,23.5};

	//testare constructor cu toti parametrii 
	Avion b("Antonov 4883", "Bucuresti-Oslo-Berlin-Tokyo",2,p,1);
	//cout << b;

	cout << "Preturile pentru avionul b sunt: " << b.get_pret_locuri() << endl;

	return 1;
}

Avion::Avion():id(Avion::nr_avioane++) {
	this->nume = "Necunoscut";
	this->ruta = "Necunoscut";
	this->numar_locuri = 0;
	this->pret_locuri = NULL;
	this->permis_de_zbor = false;
	
}


Avion::Avion(string v_nume, string v_ruta, int v_numar_locuri, float* v_pret_locuri, bool v_permis_de_zbor) :id(Avion::nr_avioane++) {
	if (v_nume.length() > 0) {
		this->nume = v_nume;

	}
	else {
		this->nume = "Necunoscut";
	}
	if (v_ruta.length() > 0) {
		this->ruta = v_ruta;

	}
	else {
		this->ruta = "Necunoscut";
	}

	if (v_numar_locuri > 0) {
		this->numar_locuri = v_numar_locuri;
	}
	else {
		this->numar_locuri = 0;
	}

	if (v_pret_locuri != NULL && v_numar_locuri>0) {
				this->pret_locuri = new float[this->numar_locuri];
				for (int i = 0; i < this->numar_locuri; i++) {
					this->pret_locuri[i] = v_pret_locuri[i];
				}
			}

	this->permis_de_zbor = v_permis_de_zbor;

}


Avion::Avion(const Avion& copie) :id(Avion::nr_avioane++) {
	this->nume = copie.nume;
	this->ruta = copie.ruta;
	this->numar_locuri = copie.numar_locuri;
	if (copie.pret_locuri != NULL) {
		this->pret_locuri = new float[this->numar_locuri];
		for (int i = 0; i < this->numar_locuri; i++) {
			this->pret_locuri[i] = copie.pret_locuri[i];
		}
	}
	this->permis_de_zbor = copie.permis_de_zbor;

}

Avion::~Avion() {
	if (this->pret_locuri != NULL && this->numar_locuri > 0) {
		delete[] this->pret_locuri;
	}
}

Avion& Avion::operator=(const Avion& avion) {
	this->nume = avion.nume;
	this->ruta = avion.ruta;
	this->numar_locuri = avion.numar_locuri;
	this->permis_de_zbor = avion.permis_de_zbor;

	if (this->pret_locuri != NULL) {
		delete[] this->pret_locuri;
	}
	if (avion.pret_locuri != NULL) {
		this->pret_locuri = new float[this->numar_locuri];
		for (int i = 0; i < this->numar_locuri; i++) {
			this->pret_locuri[i] = avion.pret_locuri[i];
		}
	}

	return *this;
}

ostream& operator<<(ostream& out, Avion a) {
	out << endl;
	out << "Afisare detalii avion: " << endl;
	out << "Nume: " << a.nume << endl;
	out << "Ruta: " << a.ruta << endl;
	out << "Numar locuri: " << a.numar_locuri << endl;
	out << "Permisiune de zbor(1-DA,0-NU): " << a.permis_de_zbor << endl;
	if (a.pret_locuri != NULL && a.numar_locuri > 0) {
		for (int i = 0; i < a.numar_locuri; i++) {
			out << "Pretul locului " << i + 1 << " este " << a.pret_locuri[i] << "." << endl;
		}
	}
	return out;
}


istream& operator>>(istream& in, Avion& a) {
	cout << "Initializare avion " << endl;
	cout << "Nume: ";
	char buf[100];
	in.getline(buf, 100);
	a.nume = buf;
	cout << "Ruta: ";
	in.getline(buf, 100);
	a.ruta = buf;
	cout << "Numar locuri: ";
	in >> a.numar_locuri;
	cout << "Disponibilitate de zbor(TRUE/FALSE): ";
	in >> a.permis_de_zbor;
	if (a.pret_locuri != NULL) {
		delete[] a.pret_locuri;
	}

	if (a.numar_locuri > 0) {
		a.pret_locuri = new float[a.numar_locuri];
		for (int i = 0; i < a.numar_locuri; i++) {
			cout << "Pretul locului " << i + 1 << " este ";
			in >> a.pret_locuri[i];
		}
	}
	return in;
}

void Avion::set_nume(string v_nume) {
	if (v_nume != "NULL") {
		this->nume = v_nume;
	}
}

string Avion::get_nume() {
	return this->nume;

}

void Avion::set_ruta(string v_ruta) {
	if (v_ruta != "NULL") {
		this->ruta = v_ruta;
	}
}

string Avion::get_ruta() {
	return this->ruta;
}

void Avion::set_numar_locuri(int v_numar_locuri) {
	if (v_numar_locuri > 0) {
		this->numar_locuri = v_numar_locuri;
	}
}

int Avion::get_numar_locuri() {
	return this->numar_locuri;
}

void Avion::set_permis_de_zbor(bool v_permis_de_zbor) {
	this->permis_de_zbor = v_permis_de_zbor;
}

bool Avion::get_permis_de_zbor() {
	return this->permis_de_zbor;
}

void Avion::set_pret_locuri(float* v_pret_locuri) {
	if (this->pret_locuri != NULL) {
		delete[] this->pret_locuri;
	}

	if (v_pret_locuri != NULL && this->numar_locuri > 0) {
		this->pret_locuri = new float[this->numar_locuri];
		for (int i = 0; i < this->numar_locuri; i++) {
			this->pret_locuri[i] = v_pret_locuri[i];
		}
	}

}

float Avion::get_pret_locuri() {
	for (int i = 0; i < this->numar_locuri; i++) {
		return this->pret_locuri[i];
	}
}



void Avion::operator()() {
	if (this->numar_locuri > 0 && this->permis_de_zbor == true) {
		cout << "Avionul este pregatit pentru urmatorul zbor." << endl;
	}
}

float Avion::operator[](int index) {
	if (index >= 0 && index < this->numar_locuri && this->pret_locuri != NULL) {
		return this->pret_locuri[index];
	}
	return -1;
}

bool Avion::operator!() {
	if (this->pret_locuri == NULL) {
		return false;
	}
	else {
		return true;
	}
}

bool Avion::operator==(Avion avion) {
	if (this->numar_locuri==avion.numar_locuri) {
		return true;
}
	else {
		return false;
	}
}


Avion::operator float() {
	float a = 0;
	if (this->pret_locuri != NULL && this->numar_locuri>0) {
		for (int i = 0; i < this->numar_locuri; i++) {
			a += this->pret_locuri[i];
		}
	}
	return a;
}

int Avion::get_nr_avioane() {
	return Avion::nr_avioane;
}

Avion Avion::operator-(int a) {
	Avion copie = *this;
	if (a > 0) {
		copie.numar_locuri -= a;
	}

	return copie;
}

Avion operator-(int a, Avion& avion) {
	Avion copie = avion;
	if (a > 0) {
		copie.numar_locuri =a - copie.numar_locuri;
	}

	return copie;
}


Avion Avion::operator+(int a) {
	Avion copie = *this;
	if (a >= 0) {
		copie.numar_locuri += a;
	}

	return copie;
}

Avion operator+(int a, Avion& avion) {
	Avion copie = avion;
	if (a > 0) {
		copie.numar_locuri = a + copie.numar_locuri;
	}

	return copie;
}

//preincrementare ++y
Avion& Avion::operator++() {
	this->numar_locuri++;
	return *this;
}
//postincrementare y++
Avion Avion::operator++(int) {
	Avion copie = *this;
	this->numar_locuri++;

	return copie;
}

//predecrementare --y
Avion& Avion::operator--() {
	this->numar_locuri--;
	return *this;
}
//postdecrementare y--
Avion Avion::operator--(int) {
	Avion copie = *this;
	this->numar_locuri--;

	return copie;
}

//operator +=
Avion& Avion::operator+=(const Avion& Avion) {
	this->numar_locuri += Avion.numar_locuri;

	return *this;
}

//operator -=
Avion& Avion::operator-=(const Avion& Avion) {
	this->numar_locuri -= Avion.numar_locuri;

	return *this;
}

