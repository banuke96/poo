#include <iostream>
#include <string>

using namespace std;

class Fotbalist{
private:
	const int varsta;
	string nume;
	unsigned int nr_meciuri;
	int* nr_goluri;   // goluri pe meci
	char echipa[50];
	bool accidentat;
	static int nrJucatori;
public:
	Fotbalist();

	Fotbalist(int v_varsta, string v_nume, unsigned int v_nr_meciuri, int* v_nr_goluri, char v_echipa[50], bool v_accidentat);

	~Fotbalist();

	Fotbalist(const Fotbalist& copie);

	int getVarsta();

	void setNume(string v_nume);

	string getNume();

	void setEchipa(char v_echipa[50]);

	char* getEchipa();

	void setNrMeciuri(int v_nr_meciuri);

	int getNrMeciuri();

	void setAccidentat(bool v_accidentat);

	bool getAccidentat();

	void setNrGoluri(int * v_nr_goluri);

	int* getNrGoluri();

	static int getNrJucatori();

	// Operator =

	Fotbalist& operator=(const Fotbalist& fotbalist);

	// Operator <<

	friend ostream& operator<<(ostream& out, Fotbalist f);

	// Operator >>

	friend istream& operator>>(istream& in, Fotbalist& f);

	// Operator []

	int operator[](int index);

	// Operator ()

	int operator ()();

	// Operator !

	bool operator !();

	// Operator ==

	bool operator ==(Fotbalist f);

	// Operator cast implicit 

	operator int();

	// Operator cast explicit 

	explicit operator string();

	// Operator ++ (pre)

	Fotbalist& operator++();

	// Operator ++ (post)

	Fotbalist operator++(int);

	// Operator -- (pre)

	Fotbalist& operator--();

	// Operator -- (post)

	Fotbalist operator--(int);

	//Operator += 

	Fotbalist& operator+=(const Fotbalist& f);

	//Operator - (obiectul e primul)

	Fotbalist operator-(float discount);

	// Operator - (obiectul e al doilea)

	friend Fotbalist operator-(float discount, Fotbalist& f);

	//Operator +

	Fotbalist Fotbalist::operator+(float adaos);


};

int Fotbalist::nrJucatori = 0;

int main(){

	Fotbalist f1;
	cin >> f1;
	cout << f1;

	int varsta = f1;
	cout << "cast varsta: " << varsta << endl;

	int nr_meciuri = (int)f1;
	cout << "cast explicit nr_meciuri: " << nr_meciuri << endl;

	Fotbalist f2;
	Fotbalist f3;

	f2.setNrMeciuri(2);
	f3.setNrMeciuri(6);

	//cout << "Preincrementare: " << endl;

	//f3 = ++f2;
	//cout << f3;

	/*cout << "Post incrementare: " << endl;

	f3 = f2++;
	cout << f3; */

	f2 += f3;
	cout << f2;






	return 0;
}

Fotbalist::Fotbalist():varsta(0){
	this->nume = "Anonim";
	this->nr_meciuri = 0;
	this->nr_goluri = NULL;
	strcpy(this->echipa, "Anonim");
	this->accidentat = false;
	Fotbalist::nrJucatori++;
}

Fotbalist::Fotbalist(int v_varsta, string v_nume, unsigned int v_nr_meciuri, int* v_nr_goluri, char v_echipa[50], bool v_accidentat) :varsta(v_varsta){
	if (v_nume.length() > 0){
		this->nume = v_nume;
	}
	else{
		this->nume = "Anonim";
	}
	this->nr_meciuri = v_nr_meciuri;
	if (v_echipa != NULL){
		strcpy(this->echipa, v_echipa);
	}
	else{
		strcpy(this->echipa, "Anonim");
	}
	this->accidentat = v_accidentat;
	if (v_nr_goluri != NULL){
		this->nr_goluri = new int[this->nr_meciuri];
		for (int i = 0; i < this->nr_meciuri; i++){
			this->nr_goluri[i] = v_nr_goluri[i];
		}
	}
	Fotbalist::nrJucatori++;
}

Fotbalist::~Fotbalist(){
	if (this->nr_goluri != NULL){
		delete[] this->nr_goluri;
	}
	Fotbalist::nrJucatori--;
}

Fotbalist::Fotbalist(const Fotbalist& copie) :varsta(copie.varsta){
	this->nume = copie.nume;
	strcpy(this->echipa, copie.echipa);
	this->accidentat = copie.accidentat;
	this->nr_meciuri = copie.nr_meciuri;
	if (copie.nr_goluri != NULL){
		this->nr_goluri = new int[this->nr_meciuri];
		for (int i = 0; i < this->nr_meciuri; i++){
			this->nr_goluri[i] = copie.nr_goluri[i];
		}
	}
	Fotbalist::nrJucatori++;
}

Fotbalist& Fotbalist::operator=(const Fotbalist& fotbalist){
	this->nume = fotbalist.nume;
	strcpy(this->echipa, fotbalist.echipa);
	this->accidentat = fotbalist.accidentat;
	this->nr_meciuri = fotbalist.nr_meciuri;
	

	if (this->nr_goluri != NULL){
		delete[] this->nr_goluri;
		this->nume.clear();
	}

	if (fotbalist.nr_goluri != NULL){
		this->nr_goluri = new int[this->nr_meciuri];
		for (int i = 0; i < this->nr_meciuri; i++){
			this->nr_goluri[i] = fotbalist.nr_goluri[i];
		}
	}
	return *this;
}


ostream& operator<<(ostream& out, Fotbalist f){
	out << "Afisare fotbalist:" << endl << endl;
	out << "Varsta: " << f.varsta << endl;
	out << "Nume: " <<f.nume << endl;
	out << "Echipa: " << f.echipa << endl;
	out << "Nr meciuri: " << f.nr_meciuri << endl;
	out << "Accidentat?" << f.accidentat << endl;
	if (f.nr_goluri != NULL && f.nr_meciuri > 0){
		for (int i = 0; i < f.nr_meciuri; i++){
			out << "Goluri inscrise in meciul " << i + 1 << " : " << f.nr_goluri[i] << endl;
		}
	}
	return out;
}

istream& operator>>(istream& in, Fotbalist& f){
	cout << "Introduceti informatiile: " << endl << endl;

	cout << "Nume: ";
	char buf[50];
	in.getline(buf, 50);
	f.nume = buf;

	cout << "Echipa: ";
	in.getline(f.echipa, 50);

	cout << "Nr meciuri: ";
	in >> f.nr_meciuri;

	cout << "Accidentat? ";
	in >> f.accidentat;

	if (f.nr_goluri != NULL){
		delete[] f.nr_goluri;
	}

	f.nr_goluri = new int[f.nr_meciuri];
	for (int i = 0; i < f.nr_meciuri; i++){
		cout  << "Goluri in meciul " << i + 1 << " : ";
		in >> f.nr_goluri[i];
		
	}
	return in;
}


int Fotbalist::getVarsta(){
	return this->varsta;
}

void Fotbalist::setNume(string v_nume){
	if (v_nume.length() > 0){
		this->nume = v_nume;
	}
}

string Fotbalist::getNume(){
	return this->nume;
}

void Fotbalist::setEchipa(char v_echipa[50]){
	if (v_echipa != NULL){
		strcpy(this->echipa, v_echipa);
	}
}

char* Fotbalist::getEchipa(){
	return this->echipa;
}

void Fotbalist::setNrMeciuri(int v_nr_meciuri){
	this->nr_meciuri = v_nr_meciuri;
}

int Fotbalist::getNrMeciuri(){
	return this->nr_meciuri;
}

void Fotbalist::setAccidentat(bool v_accidentat){
	this->accidentat = v_accidentat;
}

bool Fotbalist::getAccidentat(){
	return this->accidentat;
}

void Fotbalist::setNrGoluri(int* v_nr_goluri){
	if (this->nr_goluri != NULL){
		delete[] this->nr_goluri;
	}

	if (v_nr_goluri != NULL){
		this->nr_goluri = new int[this->nr_meciuri];
		for (int i = 0; i < this->nr_meciuri; i++){
			this->nr_goluri[i] = v_nr_goluri[i];
		}
	}
}

int* Fotbalist::getNrGoluri(){
	return this->nr_goluri;
	
}

int Fotbalist::getNrJucatori(){
	return Fotbalist::nrJucatori;
}

// Operator []

int Fotbalist:: operator [](int index){
	if (index>=0 && index < this->nr_meciuri && this->nr_goluri != NULL)
	{
		return this->nr_goluri[index];
	}
	return -1;
}


// Operator ()

int Fotbalist::operator()(){
	int total_goluri=0;

	if (this->nr_goluri != NULL && this->nr_meciuri > 0){
		for (int i = 0; i < this->nr_meciuri; i++){
			total_goluri += this->nr_goluri[i];
		}
	}
	return total_goluri;
}

// Operator ! 

bool Fotbalist::operator!(){
	if (this->nr_goluri == NULL) {
		return false;
	}
	else {
		return true;
	}
}

// Operator ==

bool Fotbalist::operator==(Fotbalist f){
	if (strcmp(this->echipa, f.echipa) == 0){
		return true;
	}
	else{
		return false;
	}
}

// Operator cast implicit

Fotbalist :: operator int(){
	return this->varsta;
}

// Operator cast explicit 

Fotbalist:: operator string(){
	return this->nume;
}

// Operator ++ (pre)

Fotbalist& Fotbalist::operator++(){
	this->nr_meciuri++;
	return *this;
}

// Operator ++ (post)

Fotbalist Fotbalist::operator++(int){
	Fotbalist copie= *this;
	this->nr_meciuri++;

	return copie;
}

// Operator -- (pre)

Fotbalist& Fotbalist::operator--(){
	this->nr_meciuri--;
	return *this;
}

// Operator -- (post)

Fotbalist Fotbalist::operator--(int){
	Fotbalist copie = *this;
	this->nr_meciuri--;

	return copie;
}

//Operator +=

Fotbalist& Fotbalist::operator+=(const Fotbalist& f) {
	this->nr_meciuri += f.nr_meciuri;

	return *this;
}



//Operator - (obiectul e primul)

Fotbalist Fotbalist::operator-(float discount){
	Fotbalist copie = *this;
	if (discount > 0){
		copie.nr_meciuri = copie.nr_meciuri - discount;
	}
	return copie;
}

// Operator - (obiectul e al doilea)

Fotbalist operator-(float discount, Fotbalist& f){
	Fotbalist copie= f;
	copie.nr_meciuri = discount - copie.nr_meciuri;
	return copie;
}


//Operator +

Fotbalist Fotbalist::operator+(float adaos){
	Fotbalist copie = *this;
	if (adaos > 0){
		copie.nr_meciuri = copie.nr_meciuri + adaos;
	}
	return copie;
}
